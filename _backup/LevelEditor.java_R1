import java.lang.Integer;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;
import java.io.*;
import java.util.*;

/**********************************************************************************
 * MAIN
 **********************************************************************************/
public class LevelEditor implements ListSelectionListener, ActionListener {
	JFrame editorFrame;
	JPanel editorPanel;
	JList dirList, itemList;
	DisplayPanel displayPanel;
	JCheckBox showFileNameCB;
	JMenuItem menuFileNew, menuFileLoad, menuFileSave, menuFileQuit, menuFileSaveAs, menuFileProperties;
	JCheckBoxMenuItem[] cbLevel = new JCheckBoxMenuItem[4];
	JCheckBoxMenuItem cbGrid, cbBG, cbTile, cbEnemy;
	JScrollPane scrollPane;
	JPanel scrollPanel, enemyPanel;
	
	HashMap images = new HashMap();

	String inHand = null;	// melyik kep van a kezeben
	int inHandNum = 0;
	
	final ImageIcon closedIcon;
	final ImageIcon openIcon;
	final Image transparentImage;
	final Image missingTileImage;
	
	/**
	 *  Constructor for the LevelEditor object
	 */
	public LevelEditor() {

		closedIcon = new ImageIcon(getClass().getResource("/folder-closed.png"));
		openIcon = new ImageIcon(getClass().getResource("/folder-open.png"));
		transparentImage = (new ImageIcon(getClass().getResource("/transparent.png"))).getImage();
		missingTileImage = (new ImageIcon(getClass().getResource("/transparent_small.png"))).getImage();
		
		//Create and set up the window.
		editorFrame = new JFrame("Editor");
		editorFrame.setLayout(new BorderLayout());
		editorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		editorFrame.setSize(new Dimension(640, 640));

		//Create and set up the panel.
		editorPanel = new JPanel();
		editorPanel.setLayout(new BoxLayout(editorPanel, BoxLayout.X_AXIS));
		JPanel balPanel = new JPanel();
		balPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
		balPanel.setLayout(new BoxLayout(balPanel, BoxLayout.Y_AXIS));
		balPanel.setAlignmentY(Component.TOP_ALIGNMENT);
		editorPanel.add(balPanel);

		// konyvtar lista
		File[] subDirs = (new File(".")).listFiles(
			new FileFilter() {
				public boolean accept(File file) {
					return file.isDirectory();
				}
			});
		String[] listElements = new String[subDirs.length];
		for (int i = 0; i < subDirs.length; i++) {
			listElements[i] = subDirs[i].getName();
		}

		dirList = new JList(listElements);
		dirList.setLayoutOrientation(JList.VERTICAL);
		dirList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		dirList.setCellRenderer(new FolderListCellRenderer());
		dirList.addListSelectionListener(this);
		dirList.setFixedCellWidth(120);
		balPanel.add(dirList);

		showFileNameCB = new JCheckBox("Filenames", false);
		showFileNameCB.addActionListener(this);
		balPanel.add(showFileNameCB);

		itemList = new JList();
		itemList.setLayoutOrientation(JList.VERTICAL);
		itemList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		itemList.setCellRenderer(new ImageListCellRenderer());
		itemList.addListSelectionListener(this);
		itemList.setVisibleRowCount(-1);
		balPanel.add(itemList);
		
		showFileNameCB.setAlignmentX(Component.LEFT_ALIGNMENT);
		dirList.setAlignmentX(Component.LEFT_ALIGNMENT);
		itemList.setAlignmentX(Component.LEFT_ALIGNMENT);
		dirList.setSelectedIndex(0);
		
		scrollPanel = new JPanel();
		scrollPane = new JScrollPane(scrollPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setMaximumSize(new Dimension(20, 256));
		scrollPane.setAlignmentY(Component.TOP_ALIGNMENT);
		editorPanel.add(scrollPane);
		scrollPane.getViewport().addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				displayPanel.repaint();
			}
		});

		displayPanel = new DisplayPanel();
		displayPanel.setAlignmentY(Component.TOP_ALIGNMENT);
		editorPanel.add(displayPanel);

		enemyPanel = new JPanel(); 
		enemyPanel.setLayout(new BoxLayout(enemyPanel, BoxLayout.Y_AXIS));
		
		// Menu
		JMenuBar menuBar = new JMenuBar();
		JMenu menuFile = new JMenu("File");
		menuFile.setMnemonic(KeyEvent.VK_F);
		menuBar.add(menuFile);
		
		menuFileNew = new JMenuItem("New");
		menuFile.add(menuFileNew);
		menuFileNew.addActionListener(this);
		menuFile.addSeparator();

		menuFileLoad = new JMenuItem("Load");
		menuFile.add(menuFileLoad);
		menuFileLoad.addActionListener(this);

		menuFileSave = new JMenuItem("Save");
		menuFile.add(menuFileSave);
		menuFileSave.addActionListener(this);

		menuFileSaveAs = new JMenuItem("Save as...");
		menuFile.add(menuFileSaveAs);
		menuFileSaveAs.addActionListener(this);
		menuFile.addSeparator();

		menuFileProperties = new JMenuItem("Properties...");
		menuFile.add(menuFileProperties);
		menuFileProperties.addActionListener(this);
		menuFile.addSeparator();

		menuFileQuit = new JMenuItem("Quit");
		menuFile.add(menuFileQuit);
		menuFileQuit.addActionListener(this);

		// layerek - 0,1,2,3
		menuBar.add(Box.createHorizontalStrut(20));
		for (int i = 0; i < 4; i++) {
			cbLevel[i] = new JCheckBoxMenuItem(Integer.toString(i), true);
			cbLevel[i].addActionListener(this);
			cbLevel[i].setMaximumSize(new Dimension(24, 38));
			menuBar.add(cbLevel[i]);
		}
		
		// Enemy
		menuBar.add(Box.createHorizontalStrut(5));
		cbEnemy = new JCheckBoxMenuItem("Enemy", true);
		cbEnemy.addActionListener(this);
		cbEnemy.setMaximumSize(new Dimension(40, 38));
		menuBar.add(cbEnemy);

		// grid
		menuBar.add(Box.createHorizontalStrut(20));
		cbGrid = new JCheckBoxMenuItem("Grid", true);
		cbGrid.addActionListener(this);
		cbGrid.setMaximumSize(new Dimension(48, 38));
		menuBar.add(cbGrid);

		// grid
		menuBar.add(Box.createHorizontalStrut(5));
		cbTile = new JCheckBoxMenuItem("Tile", true);
		cbTile.addActionListener(this);
		cbTile.setMaximumSize(new Dimension(48, 38));
		menuBar.add(cbTile);

		// BG
		menuBar.add(Box.createHorizontalStrut(5));
		cbBG = new JCheckBoxMenuItem("BG", true);
		cbBG.addActionListener(this);
		cbBG.setMaximumSize(new Dimension(40, 38));
		menuBar.add(cbBG);

		menuBar.add(Box.createHorizontalGlue());
		
		editorFrame.setJMenuBar(menuBar);
		
		//Add the panel to the window.
		editorFrame.getContentPane().add(editorPanel, BorderLayout.CENTER);

		//Display the window.
		//editorFrame.pack();
		editorFrame.setVisible(true);
	}


	void updateItemList(String dir) {
		// konyvtar lista
		File[] subDirs = (new File(dir)).listFiles(
			new FileFilter() {
				public boolean accept(File file) {
					return file.isFile() && file.getName().toLowerCase().endsWith(".png");
				}
			});
		String[] listElements = new String[subDirs.length];
		for (int i = 0; i < subDirs.length; i++) {
			String actElem = "/"+dir+"/"+subDirs[i].getName();
			listElements[i] = actElem;
			
			// toltsuk be
			images.put(actElem, Toolkit.getDefaultToolkit().createImage(actElem.substring(1)));
		}

		itemList.setListData(listElements);
	}


	public void valueChanged(ListSelectionEvent e) {
		if (e.getSource() == dirList) {
			updateItemList(dirList.getSelectedValue().toString());
			//dirList.getFirstIndex());
		} else if (e.getSource() == itemList) {
			if (!itemList.isSelectionEmpty()) {
				inHand = itemList.getSelectedValue().toString();
				inHandNum = Integer.MAX_VALUE;
			}
		}
	}

	public void actionPerformed(ActionEvent event) {
		if (event.getSource() == showFileNameCB) {
			updateItemList((String) (dirList.getSelectedValue()));

		} else if (event.getSource() == menuFileNew) {
			newLevel();

		} else if (event.getSource() == menuFileLoad) {
			JFileChooser chooser = new JFileChooser(".");
			int returnVal = chooser.showOpenDialog(editorFrame);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				String levelPath = chooser.getSelectedFile().getParentFile().getAbsolutePath();
				try {
					loadLevel(levelPath);
				} catch (Exception e) {e.printStackTrace();}
			}

		} else if (event.getSource() == menuFileSave) {
			saveLevel();

		} else if (event.getSource() == menuFileQuit) {
			System.exit(0);

		} else if (event.getSource() == cbGrid || event.getSource() == cbBG || event.getSource() == cbTile) {
			displayPanel.repaint();

		} else if (Arrays.asList(cbLevel).contains(event.getSource())) {
			displayPanel.repaint();
		}
	}


	private static void createAndShowGUI() {
		//Make sure we have nice window decorations.
		JFrame.setDefaultLookAndFeelDecorated(true);

		LevelEditor le = new LevelEditor();
	}

	public static void main(String[] args) {
		//Schedule a job for the event-dispatching thread:
		//creating and showing this application's GUI.
		javax.swing.SwingUtilities.invokeLater(
			new Runnable() {
				public void run() {
					createAndShowGUI();
				}
			});
	}


/**********************************************************************************
 * CELLRENDERER
 **********************************************************************************/
	class FolderListCellRenderer extends JLabel implements ListCellRenderer {
	
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			String s = value.toString();
			setText(s);
			if (isSelected) {
				setBackground(list.getSelectionBackground());
				setForeground(list.getSelectionForeground());
				setIcon(openIcon);
			} else {
				setBackground(list.getBackground());
				setForeground(list.getForeground());
				setIcon(closedIcon);
			}
			setEnabled(list.isEnabled());
			setFont(list.getFont());
			setOpaque(true);
			return this;
		}
	}

/**********************************************************************************/
	class ImageListCellRenderer extends JLabel implements ListCellRenderer {
	
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			String s = value.toString();
			ImageIcon icon = new ImageIcon((Image)(images.get(s)));
			setIcon(icon);

			if (showFileNameCB.isSelected()) {
				setText(s.substring(s.lastIndexOf('/')+1, s.length()-4));
				setBorder(null);
			} else {
				setText(null);
				if (isSelected) {
					setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
				} else {
					setBorder(null);
				}
			}
			
			if (isSelected) {
				setBackground(list.getSelectionBackground());
				setForeground(list.getSelectionForeground());
			} else {
				setBackground(list.getBackground());
				setForeground(list.getForeground());
			}
			setEnabled(list.isEnabled());
			setFont(list.getFont());
			setOpaque(true);
			return this;
		}
	}

/**********************************************************************************
/* LevelLoader
/**********************************************************************************/

	Image[] bgImages;
	byte[][] bg;
	float bgLen;
	int[] bgSpeed;
	ArrayList trl;
	String levelPath = null;
	
	void newLevel() {
		if (JOptionPane.showConfirmDialog(editorFrame, "Vigyazz, kitorli az egesz palyat (save eseten diszkrol is!!!)\nEzt akarod?", "ZOH", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
			if (levelPath == null) {
				JOptionPane.showMessageDialog(editorFrame, "Elobb tolts be egy palyat!\n(Vagy masold le az egyiket, ha ujat akarsz)");
			}
			bgImages = new Image[0];
			bg = new byte[4][];
			for (int i = 0; i < 4; i++) {
				bg[i] = new byte[20*16];
			}
			trl = new ArrayList();
			
			recalcLevelLength();
		}
	}
	
	
	void loadLevel(String levelPath) throws IOException {
		this.levelPath = levelPath;
		{
			Vector v = new Vector(20,10);
			InputStream is = new FileInputStream(levelPath+"/trl");
			trl = new ArrayList();
		
			for (int i = 0; ; i++) {
				String imageFile = readLine(is);
				if (imageFile.length() <= 1) break;
				if (!imageFile.startsWith("/")) imageFile = "/"+imageFile;
				trl.add(imageFile);
				v.addElement((new ImageIcon(levelPath+"/.."+imageFile)).getImage());
			}
			bgImages = new Image[v.size()];
			v.copyInto(bgImages);
		}
		
		bg = new byte[4][];
		for (int i=0; i<bg.length; i++) {
			InputStream is = new FileInputStream(levelPath+"/bg"+i);
			int len = is.read();
			len += is.read()<<8;
			bg[i] = new byte[len];
			is.read(bg[i]);
		}
		
		recalcLevelLength();
	}
	
	void optimizeLevel() {
		ArrayList<Integer> todel = new ArrayList<Integer>();
		
		// kereses
main:	for (int i = 0; i < bgImages.length; i++) {
			for (int j = 0; j < bg.length; j++) {
				for (int k = 0; k < bg[j].length; k++) {
					if (bg[j][k] == i+'A') continue main;
				}
			}
			
			todel.add(i);
		}
		
		// javitas
		ArrayList bgIm = new ArrayList(Arrays.asList(bgImages));
		
		for (int i = 0; i < todel.size(); i++) {
			int delIndex = todel.get(i);
			
			trl.set(delIndex, null);
			bgIm.set(delIndex, null);
			
			for (int j = 0; j < bg.length; j++) {
				for (int k = 0; k < bg[j].length; k++) {
					if (bg[j][k] > delIndex+'A') bg[j][k]--;
				}
			}
		}
		
		// torles
		for (int i = 0; i < trl.size(); i++) {
			if (trl.get(i) == null) {
				trl.remove(i);
				bgIm.remove(i);
				i--;
			}
		}
		
		bgImages = new Image[bgIm.size()];
		bgIm.toArray(bgImages);
	}		
	
	void saveLevel() {
		optimizeLevel();
		
		try {
			// trl
			FileWriter fw = new FileWriter(levelPath+"/trl");
			for (int i = 0; i < trl.size(); i++) {
				String writtenLine = trl.get(i).toString();
				if (!writtenLine.startsWith("/")) writtenLine = "/"+writtenLine;
				fw.write(writtenLine);
				fw.write("\n");
			}
			fw.close();
		
			// level
			for (int i = 0; i < bg.length; i++) {
				OutputStream os = new FileOutputStream(levelPath+"/bg"+i);
				os.write(bg[i].length&0xff);
				os.write(bg[i].length>>8);
				os.write(bg[i]);
				os.close();
			}
		} catch (IOException e) {
			JOptionPane.showMessageDialog(editorFrame, "Error saving level:\n"+e);
		}
	}
	
	void recalcLevelLength() {
		bgLen = 0;
		for (int i=0; i<bg.length; i++) {
			float actbgLen = (((float)bg[i].length/10)*32)/(float)bgSpeed[i];
			
			System.out.println("Loading level "+i+", length: "+actbgLen);
			if (bgLen < actbgLen) bgLen = actbgLen;
		}
		
		System.out.println("Level length: "+bgLen);
		if (bgLen < 256) bgLen+=128;
		bgLen+=128;
		scrollPanel.setMinimumSize(new Dimension(1, Math.round(bgLen)));
		scrollPanel.setPreferredSize(new Dimension(1, Math.round(bgLen)));
		scrollPanel.setMaximumSize(new Dimension(1, Math.round(bgLen)));
		scrollPanel.revalidate();
	}

	String readLine(InputStream is) throws IOException {
		byte[] buf = new byte[127];
		int index = 0;
		for (buf[index] = (byte)is.read(); buf[index] > 0 && buf[index] != '\n'; buf[++index] = (byte)is.read());
		return new String(buf, 0, index);
	}

	
/**********************************************************************************
/* Level Manipulator
/**********************************************************************************/
	int getSelectedLayer() {
		int selectedLayer = -1;
		for (int i = 0; i < 4; i++) {
			if (cbLevel[i].isSelected()) {
				if (selectedLayer < 0) {
					selectedLayer = i;
				} else {
					selectedLayer = -1;
					break;
				}
			}
		}
		
		return selectedLayer;
	}

	int translateToLevelY(int selectedLayer, int screenY) {
		return (scrollPane.getViewport().getViewPosition().y*bgSpeed[selectedLayer]) + (4*32) - screenY;
	}
	
	String removeTile(int layer, int x, int y) {
		int trlIndex = bg[layer][y*10+x]-'A';
		if (trlIndex >= 0) {
			bg[layer][y*10+x] = 0;
			return (String)(trl.get(trlIndex));
		} else {
			return null;
		}
	}

	int loadTile(String tileName) {
		int retIndex = trl.indexOf(tileName); 
		if (retIndex >= 0) return retIndex;
			
		System.out.println("Loading "+tileName);
		Image newImage = (new ImageIcon(levelPath+"/../"+tileName)).getImage();
		
		retIndex = trl.size();
		trl.add(tileName);
		Image[] temp = new Image[bgImages.length+1];
		System.arraycopy(bgImages, 0, temp, 0, bgImages.length);
		temp[bgImages.length] = newImage;
		bgImages = temp;
		
		return retIndex;
	}
	
	void setTile(int layer, int x, int y, String tileName) {
		int trlIndex = loadTile(tileName);
		bg[layer][y*10+x] = (byte)('A'+trlIndex);
	}
	
	void insertRow(int selectedLayer, int posY) {
		// masolat keszitese
		byte[] tempbg = new byte[bg[selectedLayer].length+10];
		
		if (posY <= 0) {
			System.arraycopy(bg[selectedLayer], 0, tempbg, 10, bg[selectedLayer].length);
		} else if (posY >= bg[selectedLayer].length/10) {
			System.arraycopy(bg[selectedLayer], 0, tempbg, 0, bg[selectedLayer].length);
		} else {
			System.arraycopy(bg[selectedLayer], 0, tempbg, 0, posY*10);
			System.arraycopy(bg[selectedLayer], posY*10, tempbg, (posY+1)*10, bg[selectedLayer].length-(posY*10));
		}
		
		bg[selectedLayer] = tempbg;
		recalcLevelLength();
	}
	
	void deleteRow(int selectedLayer, int posY) {
		if (posY < 0 || posY >= bg[selectedLayer].length/10) return;

		byte[] tempbg = new byte[bg[selectedLayer].length-10];
		System.arraycopy(bg[selectedLayer], 0, tempbg, 0, posY*10);
		System.arraycopy(bg[selectedLayer], (posY+1)*10, tempbg, posY*10, bg[selectedLayer].length-((posY+1)*10));
		bg[selectedLayer] = tempbg;
		recalcLevelLength();
	}

/**********************************************************************************
/* LevelRenderer
/**********************************************************************************/
	class DisplayPanel extends JPanel implements MouseListener, MouseMotionListener {
	
		int[] MB = new int[3];
		int MX, MY;
		final Stroke gridStroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[] {1, 1}, 0);
		final Stroke tileStroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[] {1, 1}, 1);
		
		public DisplayPanel() {
			setMaximumSize(new Dimension(getHeight(), getWidth()));
			setMinimumSize(new Dimension(getHeight(), getWidth()));
			setPreferredSize(new Dimension(getHeight(), getWidth()));
			setBackground(Color.black);
			addMouseListener(this);
			addMouseMotionListener(this);
		}
	
		public void paintComponent(Graphics g) {
			if (cbBG.isSelected()) {
				g.drawImage(transparentImage, 0, 0, null);
			} else {
				super.paintComponent(g);
			}
			if (bg == null || bg.length < 4) return;

			int bgPosition = scrollPane.getViewport().getViewPosition().y;
			int selectedLayer = getSelectedLayer();
			Graphics2D g2 = (Graphics2D)g;
			
			// palya kirajzolas
			for (int bg=0; bg<4; bg++) {
				if (!cbLevel[bg].isSelected()) continue;
				int pos = (bgPosition*bgSpeed[bg]);
				int bgSubPos = pos&0x1f;
				int bgPos = pos>>5;
				for (int y=-4; y<=7; y++) {
					for (int x=0; x<10; x++) {
						int tile = -1;
						int xPos = x*16;
						int yPos = y*32+bgSubPos;
						
						try {
							tile = bg[bg][(bgPos+3-y)*10+x]-'A';
						} catch (Exception e) {
							if (selectedLayer == bg) g.drawImage(missingTileImage, xPos, yPos, null);
						}
						if (tile>=0) {
							if (bgImages[tile].getHeight(null)+yPos > 0) {
								g.drawImage(bgImages[tile], xPos, yPos, null);
								if (cbTile.isSelected() && selectedLayer == bg) {
									g2.setStroke(tileStroke);
									g2.setColor(Color.RED);
									g2.draw(new Line2D.Float(xPos, yPos, xPos, yPos+32));
									g2.setColor(Color.YELLOW);
									g2.draw(new Line2D.Float(xPos, yPos, xPos+16, yPos));
								}
							}
						}
					}
				}
				
				// grid
				if (cbGrid.isSelected() && selectedLayer == bg) {
					g2.setStroke(gridStroke);
					g2.setColor(Color.white);
					for (int x = 1; x < 10; x++) {
						g2.draw(new Line2D.Float(x*16, 0, x*16, 256));
					}
					for (int y = -4; y <= 7; y++) {
						g2.draw(new Line2D.Float(0, y*32+bgSubPos, 256, y*32+bgSubPos));
					}
				}
				
				// inhand
				if (selectedLayer == bg && inHand != null && MX >= 0 && MY >= 0) {
					
					int xPos = MX&0xfffffff0;
					int yPos = ((MY-bgSubPos)&0xffffffe0)+bgSubPos;
					int trlIndex = loadTile(inHand);
					if (trlIndex < 0) throw new RuntimeException("BUG! "+inHand);
					
					g.drawImage(bgImages[trlIndex], xPos, yPos, null);
				}
			}
			
			g.dispose();
		}
		
		public void mouseClicked(MouseEvent e) {
			if (e.getButton() == MouseEvent.BUTTON1) {			// kezben levo ojjektum lerakasa
				int selectedLayer = getSelectedLayer();
				if (selectedLayer < 0) return;
				
				int posY = translateToLevelY(selectedLayer, e.getY());
				int posX = e.getX();

				if (inHand == null) {		// felszedes
					inHand = removeTile(selectedLayer, posX>>4, posY>>5);
					inHandNum = 1;
				} else {					// lerakas
					setTile(selectedLayer, posX>>4, posY>>5, inHand);
					inHandNum--;
					if (inHandNum == 0) {
						inHand = null;
						itemList.clearSelection();
					}
				}
				displayPanel.repaint();
				
			} else if (e.getButton() == MouseEvent.BUTTON2) {	// kezben levo objektum elhajitasa
			}
		}

		public void mousePressed(MouseEvent e) {
			switch (e.getButton()) {
				case MouseEvent.BUTTON1: MB[0] = e.getX(); break;
				case MouseEvent.BUTTON2: MB[1] = e.getX(); break;
				case MouseEvent.BUTTON3: MB[2] = e.getX(); break;
			}
		}

		public void mouseReleased(MouseEvent e) {
			switch (e.getButton()) {
				case MouseEvent.BUTTON1: MB[0] = -1; break;
				case MouseEvent.BUTTON2: MB[1] = -1; break;
				case MouseEvent.BUTTON3: 
					if (MB[2] >= 0) {
						int selectedLayer = getSelectedLayer();
						if (selectedLayer < 0) return;
						
						int posY = translateToLevelY(selectedLayer, e.getY());
						
						if (e.getX() - MB[2] > 10) {
							deleteRow(selectedLayer, posY>>5);
						} else if (MB[2] - e.getX() > 10) {
							insertRow(selectedLayer, posY>>5);
						} else {
							inHand = null;
							inHandNum = 0;
							itemList.clearSelection();
						}
						repaint();
					}
					MB[2] = -1;
					break;
			}
		}

		public void mouseEntered(MouseEvent e) {
		}

		public void mouseExited(MouseEvent e) {
			//MX = -1;
			//MY = -1;
		}
		
		public void mouseDragged(MouseEvent e) {
		}
		
		public void mouseMoved(MouseEvent e) {
			MX = e.getX();
			MY = e.getY();
			
			if (inHand != null) repaint();
		}
		
		public int getHeight() {
			return 256;
		}
	
		public int getWidth() {
			return 256;
		}
	}
}


/**********************************************************************************
/* ImageComponent
/**********************************************************************************/
class ImageComponent extends JPanel {
	
	Image im;
	
	public ImageComponent(Image _im) {
		im = _im;
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(im, 0, 0, null);
	}
	
	public int getHeight() {
		return im.getHeight(null);
	}

	public int getWidth() {
		return im.getWidth(null);
	}
}


